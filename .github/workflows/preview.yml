name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: "preview-${{ github.event.number }}"
  cancel-in-progress: true

jobs:
  build-and-deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Optimize images
        run: node scripts/optimize-images.js
      
      - name: Build PR preview
        run: npm run build
      
      - name: List build output
        run: ls -la out/
      
      - name: Deploy to Firebase Hosting
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: 'central-coast-swim-preview'
          channelId: 'pr-${{ github.event.number }}'
          expires: 30d
          
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const pr_number = context.issue.number;
            const previewUrl = '${{ steps.deploy.outputs.url }}' || `https://central-coast-swim-preview--pr-${pr_number}.web.app`;
            
            // Delete previous comments from this action
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pr_number,
            });
            
            for (const comment of comments.data) {
              if (comment.user.login === 'github-actions[bot]' && comment.body.includes('ðŸš€ **Preview deployed!**')) {
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: comment.id,
                });
              }
            }
            
            // Create new comment
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: `ðŸš€ **Preview deployed!**\n\nYou can preview your changes at: ${previewUrl}\n\n*This preview will be updated automatically when you push new commits to this PR.*\n\n**Note:** Preview is hosted on Firebase Hosting using GitHub Actions deployment method.`
            });